#include <U8g2lib.h>
#include <Bounce2.h>


bool inMenu0 = false;
bool inMenu1 = false;
bool inMenu2 = false;
bool inMenu3 = false;
bool inMenu4 = false;
bool inMenu_Min = false;
bool inMenu_Hrs = false;





int Hrs = 12;
int Min = 0;
int Sec = 0;


const int ics7447_count = 4;
const int ics7447_input_pins[ics7447_count][4] = {
  {2, 3, 4, 5}, // IC1: Pins for BCD input A, B, C, D
  {6, 7, 8, 9}, // IC2: Pins for BCD input A, B, C, D
  {10, 11, 12, 13}, // IC3: Pins for BCD input A, B, C, D
  {14, 15, 16, 17} // IC4: Pins for BCD input A, B, C, D
};

byte button_pins[] = {22, 23, 24, 25}; 
#define NUMBUTTONS sizeof(button_pins)
Bounce * buttons = new Bounce[NUMBUTTONS];

U8X8_SSD1306_128X64_NONAME_HW_I2C display(U8X8_PIN_NONE);

#define MENU_SIZE 4
char *menu[MENU_SIZE] = { "Show time", "Time settings", "Tx settings", "Alarms"};
int cursor=0;


void setup() {
  Serial.begin(9600);
  for (int i=0; i<NUMBUTTONS; i++) {
    buttons[i].attach(button_pins[i], INPUT_PULLUP); // setup the bounce instance for the current button
    buttons[i].interval(25); // interval in ms
  }


    for (int ic = 0; ic < ics7447_count; ic++) {
    for (int i = 0; i < 4; i++) {
      pinMode(ics7447_input_pins[ic][i], OUTPUT); // Set BCD input pins as output
      digitalWrite(ics7447_input_pins[ic][i], LOW); // Initialize BCD inputs to zero
    }
  }



  display.begin();
  display.setPowerSave(0);
  display.setFont(u8x8_font_pxplusibmcgathin_f);

  showMenu();
}

void loop() {
  // Check every minute to update the time
  unsigned long currentMillis = millis();
  static unsigned long prevMinuteMillis = currentMillis;

    // Display hours
  displayDigit(0, Hrs / 10);
  displayDigit(1, Hrs % 10);

  // Display minutes
  displayDigit(2, Min / 10);
  displayDigit(3, Min % 10);


  if (currentMillis - prevMinuteMillis >= 60000) { // One minute has elapsed
    prevMinuteMillis = currentMillis;
      Min++;
  if (Min == 60) {
    Min = 0;
    Hrs = (Hrs + 1) % 24;
  }
  }



  // process button press:
  for (int i = 0; i<NUMBUTTONS; i++) {
    buttons[i].update(); // Update the Bounce instance
    if ( buttons[i].fell() ) { // If it fell
      if (i==0) { // select
        if (inMenu0 == true){
          inMenu0 = false;
          inMenu1= false;
          inMenu2 = false;
          inMenu3= false;
          inMenu4= false;
          executeChoice(cursor); // Execute the selected menu option
        }
        else if (inMenu1 == true){
        }
        else if (inMenu2 == true){        
        }
        else{
        }

      }
      
      else {
        if (i==1){ // down
        if (inMenu0 == true){
        down();
        }
        else if (inMenu1 == true){

        }
        else if (inMenu2 == true){
        upMin();
        }
        else if (inMenu3 == true){

        }
        else if (inMenu4 == true){

        }
        else{
          display.clearLine(2);
          display.setCursor(0, 2);
          display.print("down"); 
        }
        }
        else if (i==2) { // up
        if (inMenu0 == true){
        up();
        }
        else if (inMenu1 == true){

        }
        else if (inMenu2 == true){
        downMin();
        }
        else if (inMenu3 == true){

        }
        else if (inMenu4 == true){

        }
        else{
          display.clearLine(4);
          display.setCursor(0, 4);
          display.print("up"); 
        }
        }
        else if (i==3){
          showMenu();
        }
        else { 

        }
      }
    } // end if button fell...
  } // end for-loop of button check
}
void down(){
        display.setCursor(0,cursor * 2);
        display.print(' ');
          cursor--;
          if (cursor<0) 
          cursor=(MENU_SIZE-1);
        // show cursor at new line:
        display.setCursor(0,cursor * 2);
        display.print('>');
}
void up(){
        display.setCursor(0,cursor * 2);
        display.print(' ');
          cursor++;
          if (cursor>(MENU_SIZE-1)) 
          cursor=0;
        // show cursor at new line:
        display.setCursor(0,cursor * 2);
        display.print('>');
}

void showMenu() {
  inMenu0 = true;
  cursor=0;
  display.clearDisplay();
  // show menu items:
  for (int i = 0; i<MENU_SIZE; i++) {
    display.drawString(2,i*2,menu[i]);
    
  }
  display.setCursor(0,0);
  display.print('>');
}


void displayDigit(int ic, int digit) {
  // Map the digit to BCD
  const byte bcdMap[] = {
    B0000, // 0
    B0001, // 1
    B0010, // 2
    B0011, // 3
    B0100, // 4
    B0101, // 5
    B0110, // 6
    B0111, // 7
    B1000, // 8
    B1001  // 9
  };

  // Set the BCD input pins based on the digit
  for (int i = 0; i < 4; i++) {
    digitalWrite(ics7447_input_pins[ic][i], bitRead(bcdMap[digit], i));
  }
}

void showTime() {
  display.clearDisplay();
  display.clearLine(0);
  display.setCursor(0, 0);
  display.print(menu[cursor]);
  display.setCursor(0, 2); // Set the position for displaying time on OLED
  display.print("Time: ");
  display.print(Hrs);
  display.print(":");
  if (Min < 10) display.print("0");
  display.print(Min);
  inMenu1 = !inMenu1;
}
void showTimeSettings() {
  display.clearDisplay();
  display.clearLine(0);
  display.setCursor(0, 0);
  display.print(menu[cursor]);
  display.setCursor(0, 2); // Set the position for displaying time on OLED
  display.print("Time: ");
  display.print(Hrs);
  display.print(":");
  if (Min < 10) display.print("0");
  display.print(Min);
  inMenu2 = !inMenu2;
}


void showTxSettings() {
  display.clearDisplay();
  display.clearLine(0);
  display.setCursor(0, 0);
  display.print(menu[cursor]);

  inMenu3 = !inMenu3;
}

void showAlarmSettings() {
  display.clearDisplay();
  display.clearLine(0);
  display.setCursor(0, 0);
  display.print(menu[cursor]);

  inMenu4 = !inMenu4;
}





void upMin() {
  Min++;
  inMenu2 = !inMenu2;
  if (Min == 60) {
    Min = 0;
  }
  showTimeSettings();
}
void downMin() {
  Min--;
  inMenu2 = !inMenu2;
  if (Min == -1) {
    Min = 59;
  }
  showTimeSettings();
}

void upHrs() {
  inMenu2 = !inMenu2;
  Hrs = (Hrs + 1) % 24;
  showTimeSettings();
}
void downHrs() {
  inMenu2 = !inMenu2;
  Hrs = (Hrs - 1) % 24;
  showTimeSettings();
}



void executeChoice(int choice) {
  switch (choice) {
    case 0:
      // Show time
      showTime();
      break;
    case 1:
      // Time settings
      showTimeSettings();
      break;
    case 2:
      // Tx settings
      showTxSettings();
      break;
    case 3:
      // Alarm
      showAlarmSettings();
      break;
    default:
    break;
    }
}